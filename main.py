import requests
import time
import os
import threading
from datetime import datetime, timedelta
from flask import Flask

###########################
#  –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò  #
###########################

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
SDP_API_KEY = os.getenv("SDP_API_KEY", "")

# –û—Å–Ω–æ–≤–Ω–æ–π URL API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ (JSON)
SDP_URL = "https://sd.sadykhan.kz/api/v3/requests"

# –§–æ—Ä–º–∏—Ä—É–µ–º "–≥–ª—É–±–æ–∫—É—é" —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ WorkOrder.do
# (–ø–æ–¥—Å—Ç–∞–≤–∏–º req_id –≤ woID=)
DEEP_LINK_TEMPLATE = "https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={}&PORTALID=1"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
CHECK_INTERVAL = 60

app = Flask(__name__)

# –°–µ—Ç—ã –∏ —Å–ª–æ–≤–∞—Ä–∏ –≤ –ø–∞–º—è—Ç–∏ (–æ–±–Ω—É–ª—è—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
subscribed_chats = set()

# –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏: { request_id: {"id":..., "subject":..., "requester":..., "technician":..., "status":..., "created_time":...} }
known_requests = {}

##################################
#     HELPER: –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM
##################################

def send_telegram_message(chat_id, text):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    –ü—Ä–∏ 403-–æ—à–∏–±–∫–µ (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω) —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫.
    """
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        r = requests.post(url, json=payload, timeout=10)
        r.raise_for_status()
    except requests.exceptions.HTTPError as e:
        if r.status_code == 403:
            if chat_id in subscribed_chats:
                subscribed_chats.remove(chat_id)
            print(f"‚ùå 403 FORBIDDEN. –£–¥–∞–ª—è–µ–º {chat_id} –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫.")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {r.status_code} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    except Exception as ex:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {ex}")

def send_to_subscribers(message):
    """–†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º."""
    for chat_id in list(subscribed_chats):
        send_telegram_message(chat_id, message)

##################################
#     –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ò–ó SDP
##################################

def get_all_requests():
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –∏–∑ ServiceDesk (JSON-—Ñ–æ—Ä–º–∞—Ç).
    –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å (—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å, –ø–∞–≥–∏–Ω–∞—Ü–∏—è), –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ç—è–Ω–µ–º –≤—Å—ë.
    """
    try:
        resp = requests.get(
            SDP_URL,
            headers={"Authtoken": SDP_API_KEY, "Accept": "application/json"},
            timeout=30
        )
        resp.raise_for_status()
        data = resp.json()
        return data.get("requests", [])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ SDP: {e}")
        return []

def parse_request_data(r):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è (ID, –¢–µ–º–∞, –ê–≤—Ç–æ—Ä, –ù–∞–∑–Ω–∞—á–µ–Ω–æ, –°—Ç–∞—Ç—É—Å, –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è) 
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
    """
    req_id = str(r.get("id", "???"))

    subject = r.get("subject") or "–ë–µ–∑ —Ç–µ–º—ã"

    requester_info = r.get("requester") or {}
    requester = requester_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä")

    tech_info = r.get("technician") or {}
    technician = tech_info.get("name", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")

    status_info = r.get("status") or {}
    status = status_info.get("name", "N/A")

    created_val = r.get("created_time", {}).get("display_value", "")

    return {
        "id": req_id,
        "subject": subject,
        "requester": requester,
        "technician": technician,
        "status": status,
        "created_time": created_val
    }

def build_deep_link(req_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º "–≥–ª—É–±–æ–∫—É—é" —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞—è–≤–∫–∏:
    https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={req_id}&PORTALID=1
    """
    return DEEP_LINK_TEMPLATE.format(req_id)

def request_to_msg(req_data, prefix="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≥–¥–µ —É–∫–∞–∑—ã–≤–∞–µ–º ID, –¢–µ–º—É, –ê–≤—Ç–æ—Ä–∞, –ù–∞–∑–Ω–∞—á–µ–Ω–æ, –°—Ç–∞—Ç—É—Å, –î–∞—Ç—É.
    –ò –¥–æ–±–∞–≤–ª—è–µ–º "–≥–ª—É–±–æ–∫—É—é" —Å—Å—ã–ª–∫—É WorkOrder.do?woID=...
    """
    rid = req_data["id"]
    subject = req_data["subject"]
    requester = req_data["requester"]
    technician = req_data["technician"]
    status = req_data["status"]
    created_time = req_data["created_time"]

    deep_link = build_deep_link(rid)

    msg = (
        f"üÜï <b>{prefix} #{rid}</b>\n"
        f"üìå <b>–¢–µ–º–∞:</b> {subject}\n"
        f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {requester}\n"
        f"üîß <b>–ù–∞–∑–Ω–∞—á–µ–Ω–æ:</b> {technician}\n"
        f"‚öôÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
        f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {created_time}\n"
        f"üîó <a href='{deep_link}'>–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É</a>"
    )
    return msg

##########################
#   –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
##########################

def check_sdp():
    """
    –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫, –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫:
      - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
      - –¥–ª—è –∫–∞–∂–¥–æ–π:
        * –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ known_requests => "–Ω–æ–≤–∞—è"
        * –∏–Ω–∞—á–µ —Å–≤–µ—Ä—è–µ–º 6 –ø–æ–ª–µ–π: —Ç–µ–º–∞, –∞–≤—Ç–æ—Ä, —Ç–µ—Ö–Ω–∏–∫, —Å—Ç–∞—Ç—É—Å, –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è 
          –∏ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å => "–ò–∑–º–µ–Ω–µ–Ω–∏—è"
    """
    while True:
        all_reqs = get_all_requests()
        for r in all_reqs:
            current = parse_request_data(r)
            rid = current["id"]

            if rid not in known_requests:
                # –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
                known_requests[rid] = current
                msg = request_to_msg(current, prefix="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
                send_to_subscribers(msg)
            else:
                # –£–∂–µ –∑–Ω–∞–ª–∏ –ø—Ä–æ –∑–∞—è–≤–∫—É, –ø—Ä–æ–≤–µ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                old = known_requests[rid]
                changed_fields = []

                # subject
                if old["subject"] != current["subject"]:
                    changed_fields.append(f"–¢–µ–º–∞: {old['subject']} ‚Üí {current['subject']}")
                # requester
                if old["requester"] != current["requester"]:
                    changed_fields.append(f"–ê–≤—Ç–æ—Ä: {old['requester']} ‚Üí {current['requester']}")
                # technician
                if old["technician"] != current["technician"]:
                    changed_fields.append(f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ: {old['technician']} ‚Üí {current['technician']}")
                # status
                if old["status"] != current["status"]:
                    changed_fields.append(f"–°—Ç–∞—Ç—É—Å: {old['status']} ‚Üí {current['status']}")
                # created_time
                if old["created_time"] != current["created_time"]:
                    changed_fields.append(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {old['created_time']} ‚Üí {current['created_time']}")

                if changed_fields:
                    diffs = "\n".join(changed_fields)
                    deep_link = build_deep_link(rid)
                    msg = (
                        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ #{rid}</b>\n"
                        f"{diffs}\n"
                        f"üîó <a href='{deep_link}'>–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É</a>"
                    )
                    send_to_subscribers(msg)
                    known_requests[rid] = current

        time.sleep(CHECK_INTERVAL)

##################################
#   –ó–ê–Ø–í–ö–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–° (/START)
##################################

def get_requests_last_hour():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—è–≤–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å (UTC).
    """
    cutoff = datetime.utcnow() - timedelta(hours=1)
    all_reqs = get_all_requests()
    results = []
    for r in all_reqs:
        ctime_str = r.get("created_time", {}).get("display_value", "")
        try:
            # –§–æ—Ä–º–∞—Ç "dd/MM/yyyy hh:mm AM/PM" (–Ω–∞–ø—Ä. "07/03/2025 04:31 PM")
            dt = datetime.strptime(ctime_str, "%d/%m/%Y %I:%M %p")
        except:
            continue
        if dt >= cutoff:
            results.append(r)
    return results

def requests_list_to_text(requests_data):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ (ID, –¢–µ–º–∞, –ê–≤—Ç–æ—Ä, –ù–∞–∑–Ω–∞—á–µ–Ω–æ, –°—Ç–∞—Ç—É—Å, –î–∞—Ç–∞)."""
    if not requests_data:
        return "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    lines = []
    for r in requests_data:
        parsed = parse_request_data(r)
        line = (
            f"üîπ #{parsed['id']} | {parsed['subject']} | {parsed['requester']} | "
            f"{parsed['technician']} | {parsed['status']} | {parsed['created_time']}"
        )
        lines.append(line)
    return "\n".join(lines)

############################
#   TELEGRAM LONG POLLING
############################

def telegram_bot():
    """
    /start -> –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    /stop -> –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç
    """
    offset = None
    while True:
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
            resp = requests.get(url, params={"offset": offset}, timeout=30)
            resp.raise_for_status()
            data = resp.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ getUpdates: {e}")
            time.sleep(5)
            continue

        for upd in data.get("result", []):
            offset = upd["update_id"] + 1

            if "message" in upd:
                chat_id = upd["message"]["chat"]["id"]
                text = upd["message"].get("text", "").strip().lower()

                if text in ("/start", "start"):
                    subscribed_chats.add(chat_id)
                    send_telegram_message(chat_id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–∞–º.")
                    
                    # –ü–æ–∫–∞–∂–µ–º –∑–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                    last_hour = get_requests_last_hour()
                    msg = "–ó–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:\n"
                    msg += requests_list_to_text(last_hour)
                    send_telegram_message(chat_id, msg)

                elif text in ("/stop", "stop"):
                    if chat_id in subscribed_chats:
                        subscribed_chats.remove(chat_id)
                        send_telegram_message(chat_id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                    else:
                        send_telegram_message(chat_id, "–í—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
                else:
                    send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /stop.")

        time.sleep(2)

############################
#  FLASK - –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
############################

@app.route("/")
def home():
    return "Bot is running!"

if __name__ == "__main__":
    # 1) –ó–∞–ø—É—Å—Ç–∏–º –ø–æ—Ç–æ–∫–∏: —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ SDP
    threading.Thread(target=telegram_bot, daemon=True).start()
    threading.Thread(target=check_sdp, daemon=True).start()

    # 2) Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
