import requests
import time
from datetime import datetime, timedelta
import threading
from flask import Flask

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram Bot API
TELEGRAM_TOKEN = "<TELEGRAM_BOT_TOKEN>"  # TODO: –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ServiceDesk Plus API
SDP_API_URL = "https://sd.sadykhan.kz/api/v3/requests"
SDP_API_KEY = "<TECHNICIAN_API_KEY>"    # TODO: –≤—Å—Ç–∞–≤–∏—Ç—å TECHNICIAN_KEY –¥–ª—è API SDP
SDP_HEADERS = {"TECHNICIAN_KEY": SDP_API_KEY, "Content-Type": "application/json"}

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–ø—Ä–æ—Å–∞
SDP_POLL_INTERVAL = 60        # –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ API –∑–∞—è–≤–æ–∫ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
TELEGRAM_POLL_INTERVAL = 1    # –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
known_requests = {}    # —Å–ª–æ–≤–∞—Ä—å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ {id: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏}
subscribers = set()    # –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö chat_id
last_update_id = 0     # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

@app.route('/')
def index():
    return "ServiceDesk Plus bot is running."

def fetch_requests():
    """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ ServiceDesk Plus —á–µ—Ä–µ–∑ API."""
    input_data = {
        "list_info": {
            "row_count": 100,
            "sort_field": "created_time",
            "sort_order": "desc"
            # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:
            # "search_criteria": {
            #     "field": "status.name",
            #     "condition": "not equal",
            #     "value": "–ó–∞–∫—Ä—ã—Ç–æ"
            # }
        }
    }
    try:
        resp = requests.post(SDP_API_URL, headers=SDP_HEADERS, json=input_data, timeout=10)
        data = resp.json()
        return data.get("requests", [])
    except Exception as e:
        print(f"Error fetching requests: {e}")
        return []

def format_request_message(req, is_new=True):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    subject = req.get("subject", "–ë–µ–∑ —Ç–µ–º—ã")
    requester_name = req.get("requester", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏–∫–∞
    technician = req.get("technician")
    tech_name = technician.get("name") if technician else None
    tech_name = tech_name if tech_name else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    status_name = req.get("status", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    created_time = req.get("created_time", {}).get("display_value", "")
    request_id = req.get("id", "")
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞—è–≤–∫—É –ø–æ ID (—Ñ–æ—Ä–º–∞—Ç WorkOrder.do)
    request_link = f"https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={request_id}"
    header = "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞" if is_new else "‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"
    message = (f"{header}\n"
               f"üìå –¢–µ–º–∞: {subject}\n"
               f"üë§ –ê–≤—Ç–æ—Ä: {requester_name}\n"
               f"üîß –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {tech_name}\n"
               f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {status_name}\n"
               f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_time}\n"
               f"üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É: [–°—Å—ã–ª–∫–∞]({request_link})")
    return message

def send_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç Telegram."""
    try:
        payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
        requests.get(TELEGRAM_API_URL + "sendMessage", params=payload, timeout=5)
    except Exception as e:
        print(f"Error sending message to {chat_id}: {e}")

def handle_sutki_command(chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /sutki: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞."""
    now = datetime.now()
    since_time = now - timedelta(days=1)
    results = []
    for req_id, info in known_requests.items():
        created_val = info.get("created_time_value")
        if created_val:
            created_dt = datetime.fromtimestamp(created_val/1000.0)
            if created_dt >= since_time:
                subj = info.get("subject", "")
                status = info.get("status", {}).get("name", "")
                created_disp = info.get("created_time", {}).get("display_value", "")
                results.append(f"{req_id} ‚Äì {subj} ‚Äì –°—Ç–∞—Ç—É—Å: {status} ‚Äì –°–æ–∑–¥–∞–Ω–∞: {created_disp}")
    if results:
        message = "üìù –ó–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n" + "\n".join(results)
    else:
        message = "üì≠ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç."
    send_message(chat_id, message)

def bot_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞: –æ–ø—Ä–æ—Å API SDP –∏ Telegram, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π."""
    global last_update_id
    # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
    initial_list = fetch_requests()
    for req in initial_list:
        rid = req.get("id")
        if not rid:
            continue
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∑–∞—è–≤–∫–∏
        created_val = None
        if req.get("created_time") and req["created_time"].get("value"):
            try:
                created_val = int(req["created_time"]["value"])
            except:
                created_val = None
        known_requests[rid] = {
            "id": rid,
            "subject": req.get("subject"),
            "requester": req.get("requester", {}),
            "technician": req.get("technician"),
            "status": req.get("status", {}),
            "created_time": req.get("created_time", {}),
            "created_time_value": created_val
        }
    print(f"Loaded {len(known_requests)} initial requests.")
    last_sdp_poll = time.time()
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    while True:
        # 1. –û–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram
        try:
            params = {"timeout": 1}
            if last_update_id:
                params["offset"] = last_update_id + 1
            resp = requests.get(TELEGRAM_API_URL + "getUpdates", params=params, timeout=5)
            updates = resp.json().get("result", [])
            for update in updates:
                if 'message' in update:
                    msg = update['message']
                    chat_id = msg['chat']['id']
                    text = msg.get('text', "").strip() if msg.get('text') else ""
                    if not text:
                        continue
                    if text == "/start":
                        subscribers.add(chat_id)
                        send_message(chat_id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö.")
                    elif text == "/stop":
                        subscribers.discard(chat_id)
                        send_message(chat_id, "‚ùé –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                    elif text == "/sutki":
                        handle_sutki_command(chat_id)
                    else:
                        send_message(chat_id, "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /stop, /sutki")
            if updates:
                last_update_id = updates[-1]['update_id']
        except Exception as e:
            print(f"Telegram polling error: {e}")
        # 2. –û–ø—Ä–æ—Å API ServiceDesk Plus –ø–æ —Ç–∞–π–º–µ—Ä—É
        if time.time() - last_sdp_poll >= SDP_POLL_INTERVAL:
            last_sdp_poll = time.time()
            current_list = fetch_requests()
            if not current_list:
                continue
            current_map = {req.get("id"): req for req in current_list if req.get("id")}
            for rid, req in current_map.items():
                if rid not in known_requests:
                    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞
                    created_val = None
                    if req.get("created_time") and req["created_time"].get("value"):
                        try:
                            created_val = int(req["created_time"]["value"])
                        except:
                            created_val = None
                    known_requests[rid] = {
                        "id": rid,
                        "subject": req.get("subject"),
                        "requester": req.get("requester", {}),
                        "technician": req.get("technician"),
                        "status": req.get("status", {}),
                        "created_time": req.get("created_time", {}),
                        "created_time_value": created_val
                    }
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                    message = format_request_message(req, is_new=True)
                    for chat_id in subscribers:
                        send_message(chat_id, message)
                else:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∑–∞—è–≤–∫–µ
                    known = known_requests[rid]
                    old_status = known.get("status", {}).get("name")
                    new_status = req.get("status", {}).get("name")
                    old_tech = known.get("technician", {}).get("name") if known.get("technician") else None
                    new_tech = req.get("technician", {}).get("name") if req.get("technician") else None
                    status_changed = (old_status != new_status)
                    tech_changed = (old_tech != new_tech)
                    if status_changed or tech_changed:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
                        known_requests[rid]["status"] = req.get("status", {})
                        known_requests[rid]["technician"] = req.get("technician")
                        diff_lines = []
                        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                        if status_changed:
                            diff_lines.append(f"–°—Ç–∞—Ç—É—Å: {old_status} ‚û°Ô∏è {new_status}")
                            if new_status and new_status.lower().startswith("–∑–∞–∫—Ä—ã"):
                                # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                                created_val = known_requests[rid].get("created_time_value")
                                if created_val:
                                    created_dt = datetime.fromtimestamp(created_val/1000.0)
                                    closed_dt = datetime.now()
                                    delta = closed_dt - created_dt
                                    hours = delta.days * 24 + delta.seconds // 3600
                                    minutes = (delta.seconds % 3600) // 60
                                    diff_lines.append(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {hours} —á {minutes} –º–∏–Ω")
                        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∞
                        if tech_changed:
                            old_name = old_tech if old_tech else "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                            new_name = new_tech if new_tech else "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                            diff_lines.append(f"–¢–µ—Ö–Ω–∏–∫: {old_name} ‚û°Ô∏è {new_name}")
                            if old_tech is None and new_tech is not None:
                                # –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚Äì –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏
                                created_val = known_requests[rid].get("created_time_value")
                                if created_val:
                                    created_dt = datetime.fromtimestamp(created_val/1000.0)
                                    assign_dt = datetime.now()
                                    delta = assign_dt - created_dt
                                    hours = delta.days * 24 + delta.seconds // 3600
                                    minutes = (delta.seconds % 3600) // 60
                                    diff_lines.append(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: {hours} —á {minutes} –º–∏–Ω")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
                        diff_text = "\n".join(diff_lines)
                        update_message = (f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{rid}\n"
                                          f"üìå –¢–µ–º–∞: {req.get('subject')}\n"
                                          f"{diff_text}\n"
                                          f"üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É: [–°—Å—ã–ª–∫–∞](https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={rid})")
                        for chat_id in subscribers:
                            send_message(chat_id, update_message)
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ü–∏–∫–ª–∞
        time.sleep(TELEGRAM_POLL_INTERVAL)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞
bot_thread = threading.Thread(target=bot_loop, daemon=True)
bot_thread.start()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
