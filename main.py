#!/usr/bin/env python3
# coding: utf-8

import os
import json
import time
import threading
import requests
from datetime import datetime, timezone, timedelta
from flask import Flask

# ==============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ==============================
BOT_TOKEN   = os.getenv("BOT_TOKEN", "").strip()
SDP_API_KEY = os.getenv("SDP_API_KEY", "").strip()
SDP_URL     = os.getenv("SDP_URL", "https://sd.sadykhan.kz/api/v3/requests").strip()
PORT        = int(os.getenv("PORT", "5000"))

if not BOT_TOKEN or not SDP_API_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –∏–ª–∏ SDP_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    exit(1)

DEEP_LINK_TEMPLATE = "https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={}&PORTALID=1"
CHECK_INTERVAL    = 60   # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ SDP

app = Flask(__name__)
subscribed_chats = set()
known_requests   = {}

# –°–µ—Å—Å–∏—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

session = requests.Session()
retries = Retry(
    total=3,
    backoff_factor=1,
    status_forcelist=[429, 500, 502, 503, 504],
    allowed_methods=["GET", "POST"]
)
session.mount("https://", HTTPAdapter(max_retries=retries))
session.headers.update({
    "authtoken": SDP_API_KEY,
    "Accept": "application/json",
    "Content-Type": "application/json"
})

# ==============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ==============================
def send_telegram_message(chat_id: int, text: str):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    try:
        r = requests.post(url, json=payload, timeout=10)
        r.raise_for_status()
    except requests.exceptions.HTTPError as e:
        if r.status_code == 403:
            subscribed_chats.discard(chat_id)
            print(f"‚ùå 403 Forbidden: —É–¥–∞–ª—è–µ–º —á–∞—Ç {chat_id} –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫")
        else:
            print(f"‚ùå HTTP {r.status_code} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram: {e}")
    except Exception as ex:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {ex}")

def build_deep_link(req_id: str) -> str:
    return DEEP_LINK_TEMPLATE.format(req_id)

def parse_request_data(r: dict) -> dict:
    """–í—ã–Ω–∏–º–∞–µ–º –∏–∑ JSON —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è"""
    return {
        "id":               r.get("id", "???"),
        "subject":          r.get("short_description", "–ë–µ–∑ —Ç–µ–º—ã"),
        "requester":        (r.get("requester")  or {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"),
        "technician":       (r.get("technician") or {}).get("name", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"),
        "status":           (r.get("status")     or {}).get("name", "N/A"),
        "created_time":     r.get("created_time", {}).get("display_value", "")
    }

def request_to_msg(d: dict, prefix="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞") -> str:
    return (
        f"üÜï <b>{prefix} #{d['id']}</b>\n"
        f"üìå <b>–¢–µ–º–∞:</b> {d['subject']}\n"
        f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {d['requester']}\n"
        f"üîß <b>–ù–∞–∑–Ω–∞—á–µ–Ω–æ:</b> {d['technician']}\n"
        f"‚öôÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> {d['status']}\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {d['created_time']}\n"
        f"üîó <a href='{build_deep_link(d['id'])}'>–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É</a>"
    )

# ==============================
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å SDP
# ==============================
def get_all_requests(row_count=10) -> list:
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏, –ø—Ä–æ—Ö–æ–¥—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."""
    all_reqs = []
    start = 1

    while True:
        payload = {
            "input_data": {
                "list_info": {
                    "row_count":      row_count,
                    "start_index":    start,
                    "get_total_count": True
                }
            }
        }
        print(f"‚Üí SDP payload: start={start}, rows={row_count}")
        print(json.dumps(payload, ensure_ascii=False))
        resp = session.post(SDP_URL, json=payload, timeout=(5, 30))
        print(f"‚Üê HTTP {resp.status_code}, body: {resp.text}")

        resp.raise_for_status()
        data = resp.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        status_obj = data.get("response_status", [{}])[0]
        if status_obj.get("status") != "success":
            print("‚ùå SDP –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:", status_obj)
            break

        page = data.get("requests", [])
        all_reqs.extend(page)

        info = data.get("list_info", {})
        if not info.get("has_more_rows"):
            break

        start += row_count

    print(f"‚úì –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω–æ: {len(all_reqs)}")
    return all_reqs

# ==============================
# –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏
# ==============================
def check_sdp():
    while True:
        try:
            all_reqs = get_all_requests()
            for r in all_reqs:
                cur = parse_request_data(r)
                rid = cur["id"]

                if rid not in known_requests:
                    known_requests[rid] = cur
                    send_to_subscribers(request_to_msg(cur, prefix="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"))
                else:
                    old = known_requests[rid]
                    diffs = []

                    for field in ("subject","requester","technician","status","created_time"):
                        if old[field] != cur[field]:
                            diffs.append(f"{field}: {old[field]} ‚Üí {cur[field]}")

                    if diffs:
                        msg = "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞—è–≤–∫–µ #"+rid+"</b>\n" + "\n".join(diffs)
                        msg += f"\nüîó <a href='{build_deep_link(rid)}'>–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É</a>"
                        send_to_subscribers(msg)
                        known_requests[rid] = cur

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ check_sdp:", e)

        time.sleep(CHECK_INTERVAL)

def send_to_subscribers(text: str):
    for cid in list(subscribed_chats):
        send_telegram_message(cid, text)

# ==============================
# Telegram-–±–æ—Ç (getUpdates)
# ==============================
def get_requests_last_hour():
    one_hour_ago = datetime.now(timezone.utc) - timedelta(hours=1)
    recent = []
    for r in get_all_requests():
        ts = r.get("created_time", {}).get("display_value","")
        try:
            dt = datetime.strptime(ts, "%d/%m/%Y %I:%M %p").replace(tzinfo=timezone.utc)
        except:
            continue
        if dt >= one_hour_ago:
            recent.append(r)
    return recent

def requests_list_to_text(lst: list) -> str:
    if not lst:
        return "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    lines = []
    for r in lst:
        p = parse_request_data(r)
        lines.append(f"üîπ #{p['id']} | {p['subject']} | {p['requester']} | {p['technician']} | {p['status']} | {p['created_time']}")
    return "\n".join(lines)

def telegram_bot():
    offset = None
    while True:
        try:
            resp = requests.get(
                f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates",
                params={"offset": offset}, timeout=30
            )
            resp.raise_for_status()
            data = resp.json()
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ getUpdates:", e)
            time.sleep(5)
            continue

        for upd in data.get("result", []):
            offset = upd["update_id"] + 1
            msg = upd.get("message", {})
            cid = msg.get("chat", {}).get("id")
            txt = msg.get("text", "").strip().lower()

            if not cid or not txt:
                continue

            if txt in ("/start", "start"):
                subscribed_chats.add(cid)
                send_telegram_message(cid, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞—è–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
                recent = get_requests_last_hour()
                send_telegram_message(cid, "–ó–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:\n" + requests_list_to_text(recent))

            elif txt in ("/stop", "stop"):
                subscribed_chats.discard(cid)
                send_telegram_message(cid, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

            else:
                send_telegram_message(cid, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /stop.")

        time.sleep(2)

# ==============================
# –ó–∞–ø—É—Å–∫ Flask –∏ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
# ==============================
@app.route("/")
def home():
    return "Bot is running!"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
    threading.Thread(target=telegram_bot, daemon=True).start()
    threading.Thread(target=check_sdp, daemon=True).start()
    print(f"üöÄ Starting Flask on port {PORT}")
    app.run(host="0.0.0.0", port=PORT)
