import requests
import time
import os
import threading
from datetime import datetime, timedelta
from flask import Flask

###########################
#  –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò  #
###########################

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
SDP_API_KEY = os.getenv("SDP_API_KEY", "")

# URL –≤–∞—à–µ–≥–æ ServiceDesk
SDP_URL = "https://sd.sadykhan.kz/api/v3/requests"
SDP_REQUEST_URL = "https://sd.sadykhan.kz/requests"

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞—è–≤–∫–∏ —Å—á–∏—Ç–∞–µ–º ¬´—Å–≤–µ–∂–∏–º–∏¬ª 
CHECK_WINDOW_MINUTES = 5

app = Flask(__name__)

# –•—Ä–∞–Ω–∏–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —á–∞—Ç—ã —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è)
subscribed_chats = set()

##################################
#  –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM –§–£–ù–ö–¶–ò–ò   #
##################################

def send_telegram_message(chat_id, text):
    """–®–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. –ü—Ä–∏ 403 —É–¥–∞–ª—è–µ–º —é–∑–µ—Ä–∞ –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫."""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        r = requests.post(url, json=payload, timeout=10)
        r.raise_for_status()
    except requests.exceptions.HTTPError as e:
        if r.status_code == 403:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            if chat_id in subscribed_chats:
                subscribed_chats.remove(chat_id)
            print(f"‚ùå 403 FORBIDDEN: {chat_id} —É–±–∏—Ä–∞–µ–º –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫.")
        else:
            print(f"‚ùå HTTPError {r.status_code} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    except Exception as ex:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {ex}")

def send_to_subscribers(message):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º."""
    for chat_id in list(subscribed_chats):
        send_telegram_message(chat_id, message)

##################################
#  –ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ò–ó SDP       #
##################################

def get_recent_requests():
    """
    –¢—è–Ω–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ (–∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ SDP, –µ—Å–ª–∏ API –ø–æ–∑–≤–æ–ª—è–µ—Ç).
    –í–Ω—É—Ç—Ä–∏ —Å–∞–º–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º—Å—è CHECK_WINDOW_MINUTES, 
    —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏ (–∏ –Ω–µ —Å–ø–∞–º–∏—Ç—å).
    """
    now = datetime.utcnow()
    try:
        resp = requests.get(SDP_URL, headers={"Authtoken": SDP_API_KEY, "Accept": "application/json"}, timeout=30)
        resp.raise_for_status()
        data = resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ SDP: {e}")
        return []

    fresh_requests = []
    for req in data.get("requests", []):
        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å created_time.display_value (–∏–ª–∏ last_updated_time, –µ—Å–ª–∏ –µ—Å—Ç—å)
        created_str = req.get("created_time", {}).get("display_value", "")
        try:
            dt_created = datetime.strptime(created_str, "%d-%m-%Y %H:%M:%S")
        except:
            dt_created = now  # –ï—Å–ª–∏ –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è, —Å—á–∏—Ç–∞–µ–º —Ä–∞–≤–Ω—ã–º now

        # –°—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫—É ¬´—Å–≤–µ–∂–µ–π¬ª, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –º–µ–Ω—å—à–µ CHECK_WINDOW_MINUTES –Ω–∞–∑–∞–¥
        # (–ß—Ç–æ–±—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–¥–µ–ª–µ–π –¥–∞–≤–Ω–æ—Å—Ç–∏)
        if (now - dt_created) < timedelta(minutes=CHECK_WINDOW_MINUTES):
            fresh_requests.append(req)

    return fresh_requests

def check_sdp():
    """
    –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å: –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫ —Ç—è–Ω–µ—Ç –∑–∞—è–≤–∫–∏, 
    —Å—á–∏—Ç–∞–µ—Ç ¬´–Ω–æ–≤—ã–º–∏¬ª –≤—Å—ë, —á—Ç–æ –º–ª–∞–¥—à–µ CHECK_WINDOW_MINUTES, –∏ —à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    –ü—Ä–∏ ¬´–ø—Ä–æ—Å–ø–∞–Ω–Ω–æ–º¬ª –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª–µ–µ CHECK_WINDOW_MINUTES –∑–∞—è–≤–∫–∏ –Ω–µ –ø–æ–ø–∞–¥—É—Ç –≤ —Ä–∞—Å—Å—ã–ª–∫—É.
    """
    while True:
        requests_list = get_recent_requests()
        for r in requests_list:
            req_id = r.get("id", "???")
            subject = r.get("subject", "–ë–µ–∑ —Ç–µ–º—ã")
            desc = r.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
            requester = r.get("requester", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä")
            tech = r.get("technician", {}).get("name", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
            status = r.get("status", {}).get("name", "N/A")
            created_val = r.get("created_time", {}).get("display_value", "")

            msg = (
                f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{req_id}</b>\n"
                f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {requester}\n"
                f"üìå <b>–¢–µ–º–∞:</b> {subject}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
                f"üîß <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {tech}\n"
                f"üïë <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {created_val}\n"
                f"üîó <a href='{SDP_REQUEST_URL}/{req_id}'>–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É</a>"
            )
            send_to_subscribers(msg)

        time.sleep(60)

##################################
#    LONG POLLING TELEGRAM       #
##################################

def telegram_bot():
    """
    –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫ –¥–µ—Ä–≥–∞–µ—Ç getUpdates,
    /start ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞, /stop ‚Äî –æ—Ç–ø–∏—Å–∫–∞.
    """
    offset = None
    while True:
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
            resp = requests.get(url, params={"offset": offset}, timeout=30)
            resp.raise_for_status()
            updates = resp.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ getUpdates: {e}")
            time.sleep(5)
            continue

        for upd in updates.get("result", []):
            offset = upd["update_id"] + 1

            if "message" in upd:
                chat_id = upd["message"]["chat"]["id"]
                text = upd["message"].get("text", "").strip().lower()
                if text in ("/start", "start"):
                    subscribed_chats.add(chat_id)
                    send_telegram_message(chat_id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö.")
                elif text in ("/stop", "stop"):
                    if chat_id in subscribed_chats:
                        subscribed_chats.remove(chat_id)
                        send_telegram_message(chat_id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                    else:
                        send_telegram_message(chat_id, "–í—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
                else:
                    send_telegram_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /stop.")

        time.sleep(2)

############################
#  FLASK - –≤–µ–±-—Å–µ—Ä–≤–µ—Ä      #
############################

@app.route("/")
def home():
    return "Bot is running!"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
    threading.Thread(target=telegram_bot, daemon=True).start()
    threading.Thread(target=check_sdp, daemon=True).start()

    # Railway —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç PORT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏; –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
