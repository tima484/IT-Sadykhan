import telebot
import requests
from flask import Flask, request as flask_request
import threading
import time

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"        # —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
SDP_TOKEN = "YOUR_SDP_AUTH_TOKEN"            # authtoken –¥–ª—è ServiceDesk Plus API
SDP_URL   = "https://sd.sadykhan.kz/api/v3/requests"  # Endpoint API v3 –∑–∞—è–≤–æ–∫

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='Markdown')

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
subscribers = set()
# –°–ª–æ–≤–∞—Ä—å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫: id -> {fields...}
known_requests = {}

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (–º—Å —Å —ç–ø–æ—Ö–∏) –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö/—Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫
startup_time_ms = int(time.time() * 1000)

# –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown –≤ —Ç–µ–∫—Å—Ç–µ
def escape_md(text):
    if text is None:
        return ''
    for ch in ['*', '_', '`', '[', ']']:
        text = text.replace(ch, f"\\{ch}")
    return text

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–º—Å -> —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "X –¥ Y —á Z –º–∏–Ω")
def format_duration(ms):
    seconds = ms // 1000
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"
    minutes = seconds // 60
    hours   = minutes // 60
    days    = hours // 24
    seconds_rem = seconds % 60
    minutes_rem = minutes % 60
    hours_rem   = hours % 24
    result_parts = []
    if days > 0:
        result_parts.append(f"{days} –¥")
    if hours_rem > 0:
        result_parts.append(f"{hours_rem} —á")
    if minutes_rem > 0:
        result_parts.append(f"{minutes_rem} –º–∏–Ω")
    # —Å–µ–∫—É–Ω–¥–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ >= 1 –º–∏–Ω
    return " ".join(result_parts)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API ServiceDesk Plus —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
def fetch_requests(input_data):
    try:
        headers = {'authtoken': SDP_TOKEN}
        response = requests.post(SDP_URL, headers=headers, json=input_data, timeout=10)
        response.raise_for_status()
        data = response.json()
        return data.get('requests', [])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ SDP API: {e}")
        return []

# –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫ (–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö) —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def load_initial_requests():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ "–ó–∞–∫—Ä—ã—Ç–æ"
    input_data = {
        "list_info": {
            "fields_required": [
                "id", "subject", "requester", "technician", "status",
                "created_time", "assigned_time", "resolved_time", "completed_time"
            ],
            "search_criteria": {
                "field": "status.name",
                "condition": "is not",
                "values": ["–ó–∞–∫—Ä—ã—Ç–æ"]
            },
            "start_index": 1,
            "row_count": 100
        }
    }
    start_index = 1
    while True:
        input_data["list_info"]["start_index"] = start_index
        requests_batch = fetch_requests(input_data)
        if not requests_batch:
            break
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for req in requests_batch:
            req_id = str(req.get('id', ''))
            if not req_id:
                continue
            # –¢–µ–∫—É—â–∏–π —Ç–µ—Ö–Ω–∏–∫ –∏–ª–∏ "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            tech = req.get('technician')
            tech_name = tech.get('name') if tech and tech.get('name') else "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            status_name = req.get('status', {}).get('name', '')
            known_requests[req_id] = {
                "subject": req.get('subject', ''),
                "author": req.get('requester', {}).get('name', ''),
                "tech": tech_name,
                "status": status_name,
                "created_time": req.get('created_time', {}).get('value', 0),
                "assigned_time": req.get('assigned_time', {}).get('value'),
                "resolved_time": req.get('resolved_time', {}).get('value'),
                "completed_time": req.get('completed_time', {}).get('value')
            }
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª–æ—Å—å –ª–∏ –º–µ–Ω—å—à–µ row_count –∑–∞–ø–∏—Å–µ–π (–∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        if len(requests_batch) < input_data["list_info"]["row_count"]:
            break
        start_index += len(requests_batch)
    print(f"Initial load: {len(known_requests)} requests tracked.")

# –§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–æ—Å–∞ API –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
def poll_sdp():
    last_check = startup_time_ms  # –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º—Å)
    while True:
        now_ms = int(time.time() * 1000)
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞: –∑–∞—è–≤–∫–∏, –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø–æ—Å–ª–µ last_check
        input_data = {
            "list_info": {
                "fields_required": [
                    "id", "subject", "requester", "technician", "status",
                    "created_time", "assigned_time", "resolved_time", "completed_time", "last_updated_time"
                ],
                "search_criteria": {
                    "field": "last_updated_time",
                    "condition": "greater than",
                    "value": str(last_check)
                },
                "row_count": 100
            }
        }
        updates = fetch_requests(input_data)
        last_check = now_ms  # –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
        for req in updates:
            req_id = str(req.get('id', ''))
            if not req_id:
                continue
            subject = req.get('subject', '')
            author  = req.get('requester', {}).get('name', '')
            # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ—Ö–Ω–∏–∫
            status_name = req.get('status', {}).get('name', '')
            tech = req.get('technician')
            tech_name = tech.get('name') if tech and tech.get('name') else "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            # –ú–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º—Å) –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            created_val   = req.get('created_time', {}).get('value')
            created_disp  = req.get('created_time', {}).get('display_value', '')
            assigned_val  = req.get('assigned_time', {}).get('value') if req.get('assigned_time') else None
            resolved_val  = req.get('resolved_time', {}).get('value') if req.get('resolved_time') else None
            completed_val = req.get('completed_time', {}).get('value') if req.get('completed_time') else None

            if req_id not in known_requests:
                # –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (—Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞) –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –∑–∞–∫—Ä—ã—Ç–æ–π (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π) –∑–∞—è–≤–∫–∏
                if created_val and created_val < startup_time_ms:
                    # –ó–∞—è–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏ —Ç–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞/–ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞).
                    # –ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
                    old_status = "–ó–∞–∫—Ä—ã—Ç–æ" if (completed_val and status_name != "–ó–∞–∫—Ä—ã—Ç–æ") else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    old_tech   = "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                    changes = []
                    if old_status != status_name:
                        changes.append(f"–°—Ç–∞—Ç—É—Å: {escape_md(old_status)} ‚Üí {escape_md(status_name)}")
                    # –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏–∫ —Å–µ–π—á–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω, –∞ —Ä–∞–Ω–µ–µ —Å—á–∏—Ç–∞–ª—Å—è "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                    if tech_name != old_tech:
                        changes.append(f"–¢–µ—Ö–Ω–∏–∫: {old_tech} ‚Üí {escape_md(tech_name)}")
                        if created_val:
                            # –í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ, —Ç.–∫. —Ç–æ—á–Ω–æ–µ —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)
                            assign_time = assigned_val or now_ms
                            reaction_ms = int(assign_time) - int(created_val)
                            changes.append(f"–í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: {format_duration(reaction_ms)}")
                    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —Ç–µ–ø–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞
                    if status_name == "–ó–∞–∫—Ä—ã—Ç–æ":
                        if created_val:
                            close_time = completed_val or resolved_val or now_ms
                            closure_ms = int(close_time) - int(created_val)
                            changes.append(f"–í—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {format_duration(closure_ms)}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —Å–æ–æ–±—â–∏—Ç—å
                    if changes:
                        msg_lines = [
                            "‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞",
                            f"üìå –¢–µ–º–∞: {escape_md(subject)}",
                            *changes,
                            f"üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É](https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={req_id})"
                        ]
                        msg_text = "\n".join(msg_lines)
                        for chat_id in list(subscribers):
                            try:
                                bot.send_message(chat_id, msg_text)
                            except Exception as e:
                                print(f"Error sending update to {chat_id}: {e}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ (—Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º) –±–µ–∑ –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ "–Ω–æ–≤–∞—è"
                    known_requests[req_id] = {
                        "subject": subject, "author": author,
                        "tech": tech_name, "status": status_name,
                        "created_time": created_val or 0,
                        "assigned_time": assigned_val, 
                        "resolved_time": resolved_val,
                        "completed_time": completed_val
                    }
                else:
                    # –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (—Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)
                    msg_text = (
                        "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n"
                        f"üìå –¢–µ–º–∞: {escape_md(subject)}\n"
                        f"üë§ –ê–≤—Ç–æ—Ä: {escape_md(author)}\n"
                        f"üîß –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {escape_md(tech_name)}\n"
                        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {escape_md(status_name)}\n"
                        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {escape_md(created_disp)}\n"
                        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É](https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={req_id})"
                    )
                    for chat_id in list(subscribers):
                        try:
                            bot.send_message(chat_id, msg_text)
                        except Exception as e:
                            print(f"Error sending new ticket to {chat_id}: {e}")
                    known_requests[req_id] = {
                        "subject": subject, "author": author,
                        "tech": tech_name, "status": status_name,
                        "created_time": created_val or 0,
                        "assigned_time": assigned_val, 
                        "resolved_time": resolved_val,
                        "completed_time": completed_val
                    }
            else:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
                old = known_requests[req_id]
                changes = []
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
                if status_name != old['status']:
                    changes.append(f"–°—Ç–∞—Ç—É—Å: {escape_md(old['status'])} ‚Üí {escape_md(status_name)}")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∞
                if tech_name != old['tech']:
                    if old['tech'] == "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω" and tech_name != "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω":
                        changes.append(f"–¢–µ—Ö–Ω–∏–∫: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚Üí {escape_md(tech_name)}")
                        # –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏
                        assign_time = assigned_val or now_ms
                        try:
                            react_ms = int(assign_time) - int(old['created_time'])
                        except:
                            react_ms = 0
                        changes.append(f"–í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: {format_duration(react_ms)}")
                    else:
                        changes.append(f"–¢–µ—Ö–Ω–∏–∫: {escape_md(old['tech'])} ‚Üí {escape_md(tech_name)}")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏
                if status_name == "–ó–∞–∫—Ä—ã—Ç–æ" and old['status'] != "–ó–∞–∫—Ä—ã—Ç–æ":
                    if old.get('created_time'):
                        close_time = completed_val or resolved_val or now_ms
                        try:
                            closure_ms = int(close_time) - int(old['created_time'])
                        except:
                            closure_ms = 0
                        changes.append(f"–í—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {format_duration(closure_ms)}")
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                if changes:
                    msg_lines = [
                        "‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞",
                        f"üìå –¢–µ–º–∞: {escape_md(subject)}",
                        *changes,
                        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É](https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={req_id})"
                    ]
                    msg_text = "\n".join(msg_lines)
                    for chat_id in list(subscribers):
                        try:
                            bot.send_message(chat_id, msg_text)
                        except Exception as e:
                            print(f"Error sending update to {chat_id}: {e}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—è–≤–∫–∏
                old['status'] = status_name
                old['tech'] = tech_name
                old['assigned_time'] = assigned_val or old.get('assigned_time')
                old['resolved_time'] = resolved_val or old.get('resolved_time')
                old['completed_time'] = completed_val or old.get('completed_time')
        # –ü–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞
        time.sleep(60)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def cmd_start(message):
    chat_id = message.chat.id
    subscribers.add(chat_id)
    bot.send_message(chat_id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö ServiceDesk Plus.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
@bot.message_handler(commands=['stop'])
def cmd_stop(message):
    chat_id = message.chat.id
    subscribers.discard(chat_id)
    bot.send_message(chat_id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ServiceDesk Plus.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sutki (24 —á–∞—Å–∞)
@bot.message_handler(commands=['sutki'])
def cmd_sutki(message):
    chat_id = message.chat.id
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π: –∑–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    since_ms = int(time.time() * 1000) - 24*60*60*1000
    input_data = {
        "list_info": {
            "fields_required": [
                "id", "subject", "requester", "technician", "status", "created_time"
            ],
            "search_criteria": {
                "field": "created_time",
                "condition": "greater or equal",
                "value": str(since_ms)
            },
            "sort_field": "created_time",
            "sort_order": "ascending",
            "row_count": 100
        }
    }
    recent_reqs = fetch_requests(input_data)
    if not recent_reqs:
        bot.send_message(chat_id, "‚ùï –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –ö–æ–º–ø–æ–Ω—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫
    header = "*–ó–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*\\n\\n"
    result_text = header
    messages = []
    for req in recent_reqs:
        subject = req.get('subject', '')
        author  = req.get('requester', {}).get('name', '')
        status_name = req.get('status', {}).get('name', '')
        tech = req.get('technician')
        tech_name = tech.get('name') if tech and tech.get('name') else "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        created_disp = req.get('created_time', {}).get('display_value', '')
        req_id = req.get('id', '')
        entry = (
            f"üìå –¢–µ–º–∞: {escape_md(subject)}\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {escape_md(author)}\n"
            f"üîß –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {escape_md(tech_name)}\n"
            f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {escape_md(status_name)}\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {escape_md(created_disp)}\n"
            f"üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É](https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={req_id})\n\n"
        )
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
        if len(result_text) + len(entry) > 4000:
            messages.append(result_text)
            result_text = ""
        result_text += entry
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫
    if result_text:
        messages.append(result_text)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for text in messages:
        try:
            bot.send_message(chat_id, text)
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode
            print(f"Error sending sutki message: {e}")
            bot.send_message(chat_id, text, parse_mode=None)

# --- –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ –∏ –æ–ø—Ä–æ—Å–∞ API ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–æ–∫
load_initial_requests()

# –ü–æ—Ç–æ–∫ –±–æ—Ç–∞ Telegram (polling)
bot_thread = threading.Thread(target=lambda: bot.polling(none_stop=True, timeout=60))
bot_thread.daemon = True
bot_thread.start()

# –ü–æ—Ç–æ–∫ –æ–ø—Ä–æ—Å–∞ ServiceDesk Plus
sdp_thread = threading.Thread(target=poll_sdp)
sdp_thread.daemon = True
sdp_thread.start()

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞)
app = Flask(__name__)

@app.route('/')
def index():
    return "ServiceDesk Plus Telegram Bot is running.", 200

# –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É 8080
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
