import os
import telebot
import requests
import json
from flask import Flask, request as flask_request
import threading
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ Railway
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
SDP_TOKEN = os.getenv("SDP_API_KEY", "").strip()
SDP_URL = os.getenv("SDP_URL", "").strip()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ–º–µ–Ω –æ—Ç Railway
BASE_URL = os.getenv("RAILWAY_PUBLIC_DOMAIN", "").strip()
if not BASE_URL:
    logging.warning("RAILWAY_PUBLIC_DOMAIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–ø—Ä–æ—Å–∞.")
    USE_WEBHOOK = False
else:
    WEBHOOK_URL = f"https://{BASE_URL}/bot{BOT_TOKEN}"
    USE_WEBHOOK = True
    logging.info(f"Webhook URL: {WEBHOOK_URL}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN or ':' not in BOT_TOKEN:
    logging.error("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π BOT_TOKEN. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway.")
    raise ValueError("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π BOT_TOKEN. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway.")
if not SDP_TOKEN:
    logging.error("SDP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise ValueError("SDP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not SDP_URL:
    logging.error("SDP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise ValueError("SDP_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway.")

logging.info(f"BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω: {BOT_TOKEN[:10]}...")
logging.info(f"SDP_API_KEY –∑–∞–≥—Ä—É–∂–µ–Ω: {SDP_TOKEN[:5]}...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN, parse_mode='Markdown')

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
subscribers = set()
# –°–ª–æ–≤–∞—Ä—å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫: id -> {fields...}
known_requests = {}
# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (–º—Å —Å —ç–ø–æ—Ö–∏) –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö/—Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫
startup_time_ms = int(time.time() * 1000)

# –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown –≤ —Ç–µ–∫—Å—Ç–µ
def escape_md(text):
    if text is None:
        return ''
    for ch in ['*', '_', '`', '[', ']']:
        text = text.replace(ch, f"\\{ch}")
    return text

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–º—Å -> —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "X –¥ Y —á Z –º–∏–Ω")
def format_duration(ms):
    seconds = ms // 1000
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"
    minutes = seconds // 60
    hours = minutes // 60
    days = hours // 24
    seconds_rem = seconds % 60
    minutes_rem = minutes % 60
    hours_rem = hours % 24
    result_parts = []
    if days > 0:
        result_parts.append(f"{days} –¥")
    if hours_rem > 0:
        result_parts.append(f"{hours_rem} —á")
    if minutes_rem > 0:
        result_parts.append(f"{minutes_rem} –º–∏–Ω")
    return " ".join(result_parts)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API ServiceDesk Plus
def fetch_requests(list_info):
    try:
        payload = {"input_data": list_info}
        headers = {
            'authtoken': SDP_TOKEN,
            'Content-Type': 'application/json'
        }
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ SDP API —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: {headers}")
        logging.debug(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(payload, ensure_ascii=False, indent=2)}")
        response = requests.post(SDP_URL, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        data = response.json()
        logging.debug(f"–û—Ç–≤–µ—Ç SDP API: {data}")
        return data.get('requests', [])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ SDP API: {e}")
        if isinstance(e, requests.exceptions.HTTPError):
            logging.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
        return []

# –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫ (–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö)
def load_initial_requests():
    list_info = {
        "list_info": {
            "row_count": 100,
            "start_index": 1,
            "search_criteria": [
                {
                    "field": "status.name",
                    "condition": "is not",
                    "value": "–ó–∞–∫—Ä—ã—Ç–æ"
                }
            ]
        }
    }
    start_index = 1
    while True:
        list_info["list_info"]["start_index"] = start_index
        requests_batch = fetch_requests(list_info)
        if not requests_batch:
            break
        for req in requests_batch:
            req_id = str(req.get('id', ''))
            if not req_id:
                continue
            tech = req.get('technician')
            tech_name = tech.get('name') if tech and tech.get('name') else "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            status_name = req.get('status', {}).get('name', '')
            known_requests[req_id] = {
                "subject": req.get('subject', ''),
                "author": req.get('requester', {}).get('name', ''),
                "tech": tech_name,
                "status": status_name,
                "created_time": req.get('created_time', {}).get('value', 0),
                "assigned_time": req.get('assigned_time', {}).get('value'),
                "resolved_time": req.get('resolved_time', {}).get('value'),
                "completed_time": req.get('completed_time', {}).get('value')
            }
        if len(requests_batch) < list_info["list_info"]["row_count"]:
            break
        start_index += len(requests_batch)
    logging.info(f"–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {len(known_requests)} –∑–∞—è–≤–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")

# –§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–æ—Å–∞ API –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
def poll_sdp():
    last_check = startup_time_ms
    while True:
        now_ms = int(time.time() * 1000)
        list_info = {
            "list_info": {
                "row_count": 100,
                "search_criteria": [
                    {
                        "field": "last_updated_time",
                        "condition": "greater than",
                        "value": str(last_check)
                    }
                ]
            }
        }
        updates = fetch_requests(list_info)
        last_check = now_ms
        for req in updates:
            req_id = str(req.get('id', ''))
            if not req_id:
                continue
            subject = req.get('subject', '')
            author = req.get('requester', {}).get('name', '')
            status_name = req.get('status', {}).get('name', '')
            tech = req.get('technician')
            tech_name = tech.get('name') if tech and tech.get('name') else "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            created_val = req.get('created_time', {}).get('value')
            created_disp = req.get('created_time', {}).get('display_value', '')
            assigned_val = req.get('assigned_time', {}).get('value') if req.get('assigned_time') else None
            resolved_val = req.get('resolved_time', {}).get('value') if req.get('resolved_time') else None
            completed_val = req.get('completed_time', {}).get('value') if req.get('completed_time') else None

            if req_id not in known_requests:
                if created_val and created_val < startup_time_ms:
                    old_status = "–ó–∞–∫—Ä—ã—Ç–æ" if (completed_val and status_name != "–ó–∞–∫—Ä—ã—Ç–æ") else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    old_tech = "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                    changes = []
                    if old_status != status_name:
                        changes.append(f"–°—Ç–∞—Ç—É—Å: {escape_md(old_status)} ‚Üí {escape_md(status_name)}")
                    if tech_name != old_tech:
                        changes.append(f"–¢–µ—Ö–Ω–∏–∫: {old_tech} ‚Üí {escape_md(tech_name)}")
                        if created_val:
                            assign_time = assigned_val or now_ms
                            reaction_ms = int(assign_time) - int(created_val)
                            changes.append(f"–í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: {format_duration(reaction_ms)}")
                    if status_name == "–ó–∞–∫—Ä—ã—Ç–æ":
                        if created_val:
                            close_time = completed_val or resolved_val or now_ms
                            closure_ms = int(close_time) - int(created_val)
                            changes.append(f"–í—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {format_duration(closure_ms)}")
                    if changes:
                        msg_lines = [
                            "‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞",
                            f"üìå –¢–µ–º–∞: {escape_md(subject)}",
                            *changes,
                            f"üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É](https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={req_id})"
                        ]
                        msg_text = "\n".join(msg_lines)
                        for chat_id in list(subscribers):
                            try:
                                bot.send_message(chat_id, msg_text)
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ {chat_id}: {e}")
                    known_requests[req_id] = {
                        "subject": subject, "author": author,
                        "tech": tech_name, "status": status_name,
                        "created_time": created_val or 0,
                        "assigned_time": assigned_val,
                        "resolved_time": resolved_val,
                        "completed_time": completed_val
                    }
                else:
                    msg_text = (
                        "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n"
                        f"üìå –¢–µ–º–∞: {escape_md(subject)}\n"
                        f"üë§ –ê–≤—Ç–æ—Ä: {escape_md(author)}\n"
                        f"üîß –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {escape_md(tech_name)}\n"
                        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {escape_md(status_name)}\n"
                        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {escape_md(created_disp)}\n"
                        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É](https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={req_id})"
                    )
                    for chat_id in list(subscribers):
                        try:
                            bot.send_message(chat_id, msg_text)
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ {chat_id}: {e}")
                    known_requests[req_id] = {
                        "subject": subject, "author": author,
                        "tech": tech_name, "status": status_name,
                        "created_time": created_val or 0,
                        "assigned_time": assigned_val,
                        "resolved_time": resolved_val,
                        "completed_time": completed_val
                    }
            else:
                old = known_requests[req_id]
                changes = []
                if status_name != old['status']:
                    changes.append(f"–°—Ç–∞—Ç—É—Å: {escape_md(old['status'])} ‚Üí {escape_md(status_name)}")
                if tech_name != old['tech']:
                    if old['tech'] == "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω" and tech_name != "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω":
                        changes.append(f"–¢–µ—Ö–Ω–∏–∫: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚Üí {escape_md(tech_name)}")
                        assign_time = assigned_val or now_ms
                        try:
                            react_ms = int(assign_time) - int(old['created_time'])
                        except:
                            react_ms = 0
                        changes.append(f"–í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: {format_duration(react_ms)}")
                    else:
                        changes.append(f"–¢–µ—Ö–Ω–∏–∫: {escape_md(old['tech'])} ‚Üí {escape_md(tech_name)}")
                if status_name == "–ó–∞–∫—Ä—ã—Ç–æ" and old['status'] != "–ó–∞–∫—Ä—ã—Ç–æ":
                    if old.get('created_time'):
                        close_time = completed_val or resolved_val or now_ms
                        try:
                            closure_ms = int(close_time) - int(old['created_time'])
                        except:
                            closure_ms = 0
                        changes.append(f"–í—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {format_duration(closure_ms)}")
                if changes:
                    msg_lines = [
                        "‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞",
                        f"üìå –¢–µ–º–∞: {escape_md(subject)}",
                        *changes,
                        f"üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É](https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={req_id})"
                    ]
                    msg_text = "\n".join(msg_lines)
                    for chat_id in list(subscribers):
                        try:
                            bot.send_message(chat_id, msg_text)
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ {chat_id}: {e}")
                old['status'] = status_name
                old['tech'] = tech_name
                old['assigned_time'] = assigned_val or old.get('assigned_time')
                old['resolved_time'] = resolved_val or old.get('resolved_time')
                old['completed_time'] = completed_val or old.get('completed_time')
        time.sleep(60)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def cmd_start(message):
    chat_id = message.chat.id
    subscribers.add(chat_id)
    bot.send_message(chat_id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö ServiceDesk Plus.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
@bot.message_handler(commands=['stop'])
def cmd_stop(message):
    chat_id = message.chat.id
    subscribers.discard(chat_id)
    bot.send_message(chat_id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ServiceDesk Plus.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sutki (24 —á–∞—Å–∞)
@bot.message_handler(commands=['sutki'])
def cmd_sutki(message):
    chat_id = message.chat.id
    since_ms = int(time.time() * 1000) - 24*60*60*1000
    list_info = {
        "list_info": {
            "row_count": 100,
            "search_criteria": [
                {
                    "field": "created_time",
                    "condition": "greater than or equal to",
                    "value": str(since_ms)
                }
            ],
            "sort_field": "created_time",
            "sort_order": "asc"
        }
    }
    recent_reqs = fetch_requests(list_info)
    if not recent_reqs:
        bot.send_message(chat_id, "‚ùï –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    header = "*–ó–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*\\n\\n"
    result_text = header
    messages = []
    for req in recent_reqs:
        subject = req.get('subject', '')
        author = req.get('requester', {}).get('name', '')
        status_name = req.get('status', {}).get('name', '')
        tech = req.get('technician')
        tech_name = tech.get('name') if tech and tech.get('name') else "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        created_disp = req.get('created_time', {}).get('display_value', '')
        req_id = req.get('id', '')
        entry = (
            f"üìå –¢–µ–º–∞: {escape_md(subject)}\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {escape_md(author)}\n"
            f"üîß –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {escape_md(tech_name)}\n"
            f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {escape_md(status_name)}\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {escape_md(created_disp)}\n"
            f"üîó [–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É](https://sd.sadykhan.kz/WorkOrder.do?woMode=viewWO&woID={req_id})\n\n"
        )
        if len(result_text) + len(entry) > 4000:
            messages.append(result_text)
            result_text = ""
        result_text += entry
    if result_text:
        messages.append(result_text)
    for text in messages:
        try:
            bot.send_message(chat_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è sutki: {e}")
            bot.send_message(chat_id, text, parse_mode=None)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Railway
app = Flask(__name__)

@app.route('/')
def index():
    return "ServiceDesk Plus Telegram Bot is running.", 200

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
@app.route(f'/bot{BOT_TOKEN}', methods=['POST'])
def webhook():
    if flask_request.headers.get('content-type') == 'application/json':
        json_string = flask_request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return '', 403

# --- –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏
    load_initial_requests()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ–ø—Ä–æ—Å–∞ SDP API
    sdp_thread = threading.Thread(target=poll_sdp)
    sdp_thread.daemon = True
    sdp_thread.start()

    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    if USE_WEBHOOK:
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ)
        bot.remove_webhook()
        time.sleep(1)  # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
        webhook_response = bot.set_webhook(url=WEBHOOK_URL)
        if webhook_response:
            logging.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        else:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫.")
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WEBHOOK_URL –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏.")
    else:
        logging.warning("–†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è RAILWAY_PUBLIC_DOMAIN.")
        bot_thread = threading.Thread(target=lambda: bot.polling(none_stop=True, timeout=60))
        bot_thread.daemon = True
        bot_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.getenv("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
